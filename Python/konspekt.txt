23.03
Rekursioon (finktsiooni defineerimises kutsume sama defineetritavat funktsiooni välja)
    baas - millal lõppeb
    samm - kutsutakse uuesti välja

    Faktoriaal (n! = 1 * 2 * ... * n) (0! = 1; 1! = 1)
        4! = 4 * 3! = 4 * 3 * 2! ...
        n! = n * (n - 1)!
        def faktoriaal(n):
            if n == 0:  # baas
                return 1
            else:   # samm
                return n * faktoriaal(n - 1)

        jarjend = [9, 3, 1, 5]
        def summa(jarjend):
            if jarjend == []:
                return 0
            else:
                return jarjend[0] + summa(jarjend[1:])

    Fraktalid - puu

24.03
Hargnev rekursioon
    rakendame alamülesannet mitmele alamosale

    nt. Summa
        j = [1, [2, 3], [[[[4, 5], 6]]], 7, 8]
            1 + [...] + [...] + 7 + 8   36
                2 + 3   [...]           20
                        [...] + 6       15
                        4 + 5           9
            1 + 5   +   9   +   6 + 7 + 8 = 36
        def liida(järjend):
            summa = 0
            for element in järjend:
                if type(element) == list:   # samm
                    summa += liida(element)
                else:   # baas
                    summa += element
            return summa

30.03
Fraktalid
    osa on terviku sarnane
    baasjuhtum on suur, iga sammuga minnakse väiksemaks
        alustatakse tüvest
        liigutakse soovitud arv suundades soovitud sügavusele
    korrapärane või juhuslik

    nt.
    def puu(pikkus):
        if pikkus < 25: # rekursiooni baas
            forward(pikkus) # tehakse ainult tüvi
            back(pikkus)
        else:   # samm
            forward(pikkus) # tüvi
            left(45)
            puu(pikkus * 0.7)   # haru ehk väiksem puu
            right(90)
            puu(pikkus * 0.7)   # 2. haru ehk väiksem puu
            left(45)
            back(pikkus)